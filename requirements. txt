
  
 import pandas
 
 FEATURE: Add support for isPaused property on lottie worker
- FEATURE: Adds support for changing volume based on the audio layer data
- FEATURE: add support for removeEventListener on worker
- FEATURE: add support for updateDocumentData on worker
- FEATURE: add text as font support on worker
- FIX: avoid crash when script does not have src

## V 5.9.2
- FEATURE: add support for playsegments and blend mode on lottie worker
- FIX: Fix ts typing for loadAnimation parameter
 8  
History.md
@@ -1,3 +1,11 @@
## V 5.9.3
- FEATURE: Add support for isPaused property on lottie worker
- FEATURE: Adds support for changing volume based on the audio layer data
- FEATURE: add support for removeEventListener on worker
- FEATURE: add support for updateDocumentData on worker
- FEATURE: add text as font support on worker
- FIX: avoid crash when script does not have src

## V 5.9.2
- FEATURE: add support for playsegments and blend mode on lottie worker
- FIX: Fix ts typing for loadAnimation parameter
 BIN +5.45 KB (100%) 
build/extension/bodymovin.zxp
Binary file not shown.
  145  
build/player/lottie.js
@@ -1711,6 +1711,7 @@
    this.configAnimation = this.configAnimation.bind(this);
    this.onSetupError = this.onSetupError.bind(this);
    this.onSegmentComplete = this.onSegmentComplete.bind(this);
    this.drawnFrameEvent = new BMEnterFrameEvent('drawnFrame', 0, 0, 0);
  };

  extendPrototype([BaseEvent], AnimationItem);
@@ -2031,6 +2032,7 @@

    if (this.isPaused === true) {
      this.isPaused = false;
      this.trigger('_pause');
      this.audioController.resume();

      if (this._idle) {
@@ -2047,6 +2049,7 @@

    if (this.isPaused === false) {
      this.isPaused = true;
      this.trigger('_play');
      this._idle = true;
      this.trigger('_idle');
      this.audioController.pause();
@@ -2407,14 +2410,28 @@
    return isFrame ? this.totalFrames : this.totalFrames / this.frameRate;
  };

  AnimationItem.prototype.updateDocumentData = function (path, documentData, index) {
    try {
      var element = this.renderer.getElementByPath(path);
      element.updateDocumentData(documentData, index);
    } catch (error) {// TODO: decide how to handle catch case
    }
  };

  AnimationItem.prototype.trigger = function (name) {
    if (this._cbs && this._cbs[name]) {
      switch (name) {
        case 'enterFrame':
        case 'drawnFrame':
          this.triggerEvent(name, new BMEnterFrameEvent(name, this.currentFrame, this.totalFrames, this.frameModifier));
          break;

        case 'drawnFrame':
          this.drawnFrameEvent.currentTime = this.currentFrame;
          this.drawnFrameEvent.totalTime = this.totalFrames;
          this.drawnFrameEvent.direction = this.frameModifier;
          this.triggerEvent(name, this.drawnFrameEvent);
          break;

        case 'loopComplete':
          this.triggerEvent(name, new BMCompleteLoopEvent(name, this.loop, this.playCount, this.frameMult));
          break;
@@ -5201,7 +5218,7 @@
  lottie.useWebWorker = setWebWorker;
  lottie.setIDPrefix = setPrefix;
  lottie.__getFactory = getFactory;
  lottie.version = '5.9.2';
  lottie.version = '5.9.3';

  function checkReady() {
    if (document.readyState === 'complete') {
@@ -5225,15 +5242,15 @@
    return null;
  }

  var queryString;
  var queryString = '';

  if (standalone) {
    var scripts = document.getElementsByTagName('script');
    var index = scripts.length - 1;
    var myScript = scripts[index] || {
      src: ''
    };
    queryString = myScript.src.replace(/^[^\?]+\??/, ''); // eslint-disable-line no-useless-escape
    queryString = myScript.src ? myScript.src.replace(/^[^\?]+\??/, '') : ''; // eslint-disable-line no-useless-escape

    renderer = getQueryVariable('renderer');
  }
@@ -6635,28 +6652,47 @@
      }
    }

    function createHelper(def, fontData) {
      var tHelper = createNS('text');
      tHelper.style.fontSize = '100px'; // tHelper.style.fontFamily = fontData.fFamily;

    function createHelper(fontData, def) {
      var engine = document.body && def ? 'svg' : 'canvas';
      var helper;
      var fontProps = getFontProperties(fontData);
      tHelper.setAttribute('font-family', fontData.fFamily);
      tHelper.setAttribute('font-style', fontProps.style);
      tHelper.setAttribute('font-weight', fontProps.weight);
      tHelper.textContent = '1';

      if (fontData.fClass) {
        tHelper.style.fontFamily = 'inherit';
        tHelper.setAttribute('class', fontData.fClass);
      if (engine === 'svg') {
        var tHelper = createNS('text');
        tHelper.style.fontSize = '100px'; // tHelper.style.fontFamily = fontData.fFamily;

        tHelper.setAttribute('font-family', fontData.fFamily);
        tHelper.setAttribute('font-style', fontProps.style);
        tHelper.setAttribute('font-weight', fontProps.weight);
        tHelper.textContent = '1';

        if (fontData.fClass) {
          tHelper.style.fontFamily = 'inherit';
          tHelper.setAttribute('class', fontData.fClass);
        } else {
          tHelper.style.fontFamily = fontData.fFamily;
        }

        def.appendChild(tHelper);
        helper = tHelper;
      } else {
        tHelper.style.fontFamily = fontData.fFamily;
        var tCanvasHelper = new OffscreenCanvas(500, 500).getContext('2d');
        tCanvasHelper.font = fontProps.style + ' ' + fontProps.weight + ' 100px ' + fontData.fFamily;
        helper = tCanvasHelper;
      }

      def.appendChild(tHelper);
      var tCanvasHelper = createTag('canvas').getContext('2d');
      tCanvasHelper.font = fontData.fWeight + ' ' + fontData.fStyle + ' 100px ' + fontData.fFamily; // tCanvasHelper.font = ' 100px '+ fontData.fFamily;
      function measure(text) {
        if (engine === 'svg') {
          helper.textContent = text;
          return helper.getComputedTextLength();
        }

      return tHelper;
        return helper.measureText(text).width;
      }

      return {
        measureText: measure
      };
    }

    function addFonts(fontData, defs) {
@@ -6671,6 +6707,16 @@
        return;
      }

      if (!document.body) {
        this.isLoaded = true;
        fontData.list.forEach(function (data) {
          data.helper = createHelper(data);
          data.cache = {};
        });
        this.fonts = fontData.list;
        return;
      }

      var fontArr = fontData.list;
      var i;
      var len = fontArr.length;
@@ -6742,7 +6788,7 @@
          }
        }

        fontArr[i].helper = createHelper(defs, fontArr[i]);
        fontArr[i].helper = createHelper(fontArr[i], defs);
        fontArr[i].cache = {};
        this.fonts.push(fontArr[i]);
      }
@@ -6817,20 +6863,14 @@
      var index = _char2.charCodeAt(0);

      if (!fontData.cache[index + 1]) {
        var tHelper = fontData.helper; // Canvas version
        // fontData.cache[index] = tHelper.measureText(char).width / 100;
        // SVG version
        // console.log(tHelper.getBBox().width)
        var tHelper = fontData.helper;

        if (_char2 === ' ') {
          tHelper.textContent = '|' + _char2 + '|';
          var doubleSize = tHelper.getComputedTextLength();
          tHelper.textContent = '||';
          var singleSize = tHelper.getComputedTextLength();
          var doubleSize = tHelper.measureText('|' + _char2 + '|');
          var singleSize = tHelper.measureText('||');
          fontData.cache[index + 1] = (doubleSize - singleSize) / 100;
        } else {
          tHelper.textContent = _char2;
          fontData.cache[index + 1] = tHelper.getComputedTextLength() / 100;
          fontData.cache[index + 1] = tHelper.measureText(_char2) / 100;
        }
      }

@@ -8760,9 +8800,15 @@
    this.audio = this.globalData.audioController.createAudio(assetPath);
    this._currentTime = 0;
    this.globalData.audioController.addAudio(this);
    this._volumeMultiplier = 1;
    this._volume = 1;
    this._previousVolume = null;
    this.tm = data.tm ? PropertyFactory.getProp(this, data.tm, 0, globalData.frameRate, this) : {
      _placeholder: true
    };
    this.lv = PropertyFactory.getProp(this, data.au && data.au.lv ? data.au.lv : {
      k: [100]
    }, 1, 0.01, this);
  }

  AudioElement.prototype.prepareFrame = function (num) {
@@ -8775,6 +8821,14 @@
    } else {
      this._currentTime = num / this.data.sr;
    }

    this._volume = this.lv.v[0];
    var totalVolume = this._volume * this._volumeMultiplier;

    if (this._previousVolume !== totalVolume) {
      this._previousVolume = totalVolume;
      this.audio.volume(totalVolume);
    }
  };

  extendPrototype([RenderableElement, BaseElement, FrameElement], AudioElement);
@@ -8814,7 +8868,9 @@
  };

  AudioElement.prototype.volume = function (volumeValue) {
    this.audio.volume(volumeValue);
    this._volumeMultiplier = volumeValue;
    this._previousVolume = volumeValue * this._volume;
    this.audio.volume(this._previousVolume);
  };

  AudioElement.prototype.getBaseElement = function () {
@@ -8983,6 +9039,31 @@
    }
  };

  BaseRenderer.prototype.getElementByPath = function (path) {
    var pathValue = path.shift();
    var element;

    if (typeof pathValue === 'number') {
      element = this.elements[pathValue];
    } else {
      var i;
      var len = this.elements.length;

      for (i = 0; i < len; i += 1) {
        if (this.elements[i].data.nm === pathValue) {
          element = this.elements[i];
          break;
        }
      }
    }

    if (path.length === 0) {
      return element;
    }

    return element.getElementByPath(path);
  };

  BaseRenderer.prototype.setupGlobalData = function (animData, fontsContainer) {
    this.globalData.fontManager = new FontManager();
    this.globalData.fontManager.addChars(animData.chars);

setuptools.setup(
    name="streamlit-lottie",
    version="0.0.3",
    version="0.0.4",
    author="Fanilo ANDRIANASOLO",
    author_email="andfanilo@gmail.com",
    description="A Streamlit custom component to load Lottie animations",
 2  
streamlit_lottie/frontend/package.json
@@ -1,6 +1,6 @@
{
  "name": "streamlit_component_template",
  "version": "0.0.3",
  "version": "0.0.4",
  "private": true,
  "dependencies": {
    "@types/node": "^12.0.0",

from streamlit_lottie import lottie
scikit-learn==0.22.1
matplotlib==3.2.2
numpy==1.18.1
pandas==1.0.5
streamlit==0.62.0
Werkzeug==1.0.1

pandas >= 1.3.5
jupyter >= 1.0.0
ipykernel >= 6.6.1
lxml >= 4.7.1
plotly >= 5.5.0
streamlit >= 1.3.1
scipy
seaborn >= 0.11.2
sklearn
pystan == 2.19.1.1
fbprophet == 0.7.1

pytest >= 5.2
flake8 >= 4.0.1
mypy >= 0.930
black >= 21.12b0
streamlit_lottie==0.0.2
streamlit==1.3.0
requests==2.24.0
Pillow==8.4.0
